!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/wilson/code/cpp/koioslib/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
KOIOS_THREAD_POOL_THREAD_POOL	includes/koioslib/thread_pool/thread_pool.hpp	/^#define KOIOS_THREAD_POOL_THREAD_POOL$/;"	d
__anon27097e5e0102	src/thread_pool/thread_pool.cpp	/^                workers_.emplace_back([this]{ worker(); });$/;"	f	function:wilson::easy_thread_pool::easy_thread_pool	file:
__anon27097e5e0202	src/thread_pool/thread_pool.cpp	/^                cond_.wait(lk, [this]{ $/;"	f	function:wilson::easy_thread_pool::worker	file:
__anonefa1a7dd0102	includes/koioslib/thread_pool/thread_pool.hpp	/^                [f = ::std::forward<F>(f), args_t = ::std::move(args_tuple)] ()mutable { $/;"	f	function:wilson::easy_thread_pool::enqueue	file:
__anonefa1a7dd0202	includes/koioslib/thread_pool/thread_pool.hpp	/^                [f = ::std::forward<F>(f), args = args_tuple] ()mutable { $/;"	f	function:wilson::easy_thread_pool::enqueue_get_future	file:
__anonefa1a7dd0302	includes/koioslib/thread_pool/thread_pool.hpp	/^                tasks_.emplace([t = ::std::move(task_p)]{ (*t)(); });$/;"	f	function:wilson::easy_thread_pool::enqueue_get_future	file:
easy_thread_pool	includes/koioslib/thread_pool/thread_pool.hpp	/^class easy_thread_pool {$/;"	c	namespace:wilson
easy_thread_pool	src/thread_pool/thread_pool.cpp	/^easy_thread_pool::easy_thread_pool(size_t counts) {$/;"	f	class:wilson::easy_thread_pool
enqueue	includes/koioslib/thread_pool/thread_pool.hpp	/^        void enqueue(F&& f, Args&&... args) {$/;"	f	class:wilson::easy_thread_pool	typeref:typename:requires (::std::same_as<void,::std::result_of_t<F (Args...)>>)void
enqueue_get_future	includes/koioslib/thread_pool/thread_pool.hpp	/^        auto enqueue_get_future(F&& f, Args&&... args) {$/;"	f	class:wilson::easy_thread_pool	typeref:typename:auto
failure	test/main.cpp	/^const char* failure{ "failure" };$/;"	v	typeref:typename:const char *
foo	test/main.cpp	/^        foo(const foo& f) : msg_{ f.msg_ } {  ::std::cout << "copy" << ::std::endl; }$/;"	f	class:foo	file:
foo	test/main.cpp	/^        foo(foo&& f) noexcept : msg_{ ::std::exchange(f.msg_, failure) } { ::std::cout << "move"/;"	f	class:foo	file:
foo	test/main.cpp	/^class foo$/;"	c	file:
func	test/main.cpp	/^        func(const func&) { ::std::cout << "copy func" << ::std::endl; }$/;"	f	class:func	file:
func	test/main.cpp	/^        func(func&&) noexcept { ::std::cout << "move func" << ::std::endl; }$/;"	f	class:func	file:
func	test/main.cpp	/^class func$/;"	c	file:
join	src/thread_pool/thread_pool.cpp	/^void easy_thread_pool::join() noexcept$/;"	f	class:wilson::easy_thread_pool	typeref:typename:void
main	test/main.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
msg_	test/main.cpp	/^        const char* msg_{ "ok" };$/;"	m	class:foo	typeref:typename:const char *	file:
operator ()	test/main.cpp	/^        void operator()(foo& f)$/;"	f	class:func	typeref:typename:void	file:
return_type	includes/koioslib/thread_pool/thread_pool.hpp	/^                using return_type = ::std::result_of_t<F(Args...)>;$/;"	t	function:wilson::easy_thread_pool::enqueue
return_type	includes/koioslib/thread_pool/thread_pool.hpp	/^                using return_type = ::std::result_of_t<F(Args...)>;$/;"	t	function:wilson::easy_thread_pool::enqueue_get_future
stop	src/thread_pool/thread_pool.cpp	/^void easy_thread_pool::stop() noexcept$/;"	f	class:wilson::easy_thread_pool	typeref:typename:void
stop_and_join	includes/koioslib/thread_pool/thread_pool.hpp	/^        void stop_and_join() noexcept { stop(); join(); }$/;"	f	class:wilson::easy_thread_pool	typeref:typename:void
stop_immediately	src/thread_pool/thread_pool.cpp	/^void easy_thread_pool::stop_immediately() noexcept$/;"	f	class:wilson::easy_thread_pool	typeref:typename:void
stop_requested_	includes/koioslib/thread_pool/thread_pool.hpp	/^        bool stop_requested_{ false };$/;"	m	class:wilson::easy_thread_pool	typeref:typename:bool
thread_pool	includes/koioslib/thread_pool/thread_pool.hpp	/^using thread_pool = easy_thread_pool;$/;"	t	namespace:wilson	typeref:typename:easy_thread_pool
val	test/main.cpp	/^        const char* val() const { return msg_; }$/;"	f	class:foo	typeref:typename:const char *	file:
wilson	includes/koioslib/thread_pool/thread_pool.hpp	/^namespace wilson {$/;"	n
wilson	src/thread_pool/thread_pool.cpp	/^namespace wilson {$/;"	n	file:
worker	src/thread_pool/thread_pool.cpp	/^void easy_thread_pool::worker() noexcept {$/;"	f	class:wilson::easy_thread_pool	typeref:typename:void
~easy_thread_pool	src/thread_pool/thread_pool.cpp	/^easy_thread_pool::~easy_thread_pool()$/;"	f	class:wilson::easy_thread_pool
~foo	test/main.cpp	/^        ~foo() { msg_ = failure; }$/;"	f	class:foo	file:
